/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.SQLite;
import Model.Product;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author beepxD
 */
public class MgmtProduct extends javax.swing.JPanel {

    public SQLite sqlite;
    public DefaultTableModel tableModel;
    private int userRole;
    private String currentUsername;
    
    public MgmtProduct(SQLite sqlite, int userRole, String username) {
        initComponents();
        this.sqlite = sqlite;
        this.currentUsername = username;
        this.userRole = userRole;
        tableModel = (DefaultTableModel)table.getModel();
        table.getTableHeader().setFont(new java.awt.Font("SansSerif", java.awt.Font.BOLD, 14));

        // Hide management buttons based on role
        configureButtonVisibility(userRole);
    }

    public void init(){
        //      CLEAR TABLE
        for(int nCtr = tableModel.getRowCount(); nCtr > 0; nCtr--){
            tableModel.removeRow(0);
        }
        
//      LOAD CONTENTS
        ArrayList<Product> products = sqlite.getProduct();
        for(int nCtr = 0; nCtr < products.size(); nCtr++){
            tableModel.addRow(new Object[]{
                products.get(nCtr).getName(), 
                products.get(nCtr).getStock(), 
                products.get(nCtr).getPrice()});
        }

        configureButtonVisibility(userRole);
    }
    
    public void designer(JTextField component, String text){
        component.setSize(70, 600);
        component.setFont(new java.awt.Font("Tahoma", 0, 18));
        component.setBackground(new java.awt.Color(240, 240, 240));
        component.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        component.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), text, javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12)));
    }


    private void configureButtonVisibility(int userRole) {
        // Role definitions:
        // 5 = Admin (full access)
        // 4 = Manager (can manage products)
        // 3 = Staff (can manage products)
        // 2 = Client (can only purchase)

        switch(userRole) {
            case 5: // Admin - full access
                addBtn.setVisible(true);
                editBtn.setVisible(true);
                deleteBtn.setVisible(true);
                purchaseBtn.setVisible(true);
                break;

            case 4: // Manager - can manage products
                addBtn.setVisible(true);
                editBtn.setVisible(true);
                deleteBtn.setVisible(true);
                purchaseBtn.setVisible(true);
                break;

            case 3: // Staff - can manage products
                addBtn.setVisible(true);
                editBtn.setVisible(true);
                deleteBtn.setVisible(true);
                purchaseBtn.setVisible(true);
                break;

            case 2: // Client - can only purchase
                addBtn.setVisible(false);
                editBtn.setVisible(false);
                deleteBtn.setVisible(false);
                purchaseBtn.setVisible(true);
                break;

            default: // Any other role - minimal access
                addBtn.setVisible(false);
                editBtn.setVisible(false);
                deleteBtn.setVisible(false);
                purchaseBtn.setVisible(true);
                break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        purchaseBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();

        table.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Stock", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(24);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(50);
            table.getColumnModel().getColumn(1).setMaxWidth(100);
            table.getColumnModel().getColumn(2).setMaxWidth(100);
        }

        purchaseBtn.setBackground(new java.awt.Color(255, 255, 255));
        purchaseBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        purchaseBtn.setText("PURCHASE");
        purchaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseBtnActionPerformed(evt);
            }
        });

        addBtn.setBackground(new java.awt.Color(255, 255, 255));
        addBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        editBtn.setBackground(new java.awt.Color(255, 255, 255));
        editBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        editBtn.setText("EDIT");
        editBtn.setToolTipText("");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(255, 255, 255));
        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(purchaseBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(editBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(purchaseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void purchaseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseBtnActionPerformed
        if(table.getSelectedRow() >= 0){
            try {
                // Get selected product information
                String productName = tableModel.getValueAt(table.getSelectedRow(), 0).toString();
                int availableStock = Integer.parseInt(tableModel.getValueAt(table.getSelectedRow(), 1).toString());
                double productPrice = Double.parseDouble(tableModel.getValueAt(table.getSelectedRow(), 2).toString());

                // Check if product is in stock
                if (availableStock <= 0) {
                    JOptionPane.showMessageDialog(null,
                            "Sorry, '" + productName + "' is out of stock.",
                            "Out of Stock",
                            JOptionPane.WARNING_MESSAGE);
                    return;
                }

                JTextField stockFld = new JTextField("1"); // Default to 1
                designer(stockFld, "QUANTITY TO PURCHASE");

                Object[] message = {
                        "How many '" + productName + "' do you want to purchase?",
                        "Available Stock: " + availableStock,
                        "Price per unit: $" + String.format("%.2f", productPrice),
                        stockFld
                };

                int result = JOptionPane.showConfirmDialog(null, message, "PURCHASE PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

                if (result == JOptionPane.OK_OPTION) {
                    // Parse and validate purchase quantity
                    int purchaseQuantity = Integer.parseInt(stockFld.getText().trim());

                    if (purchaseQuantity <= 0) {
                        JOptionPane.showMessageDialog(null,
                                "Please enter a valid quantity (greater than 0).",
                                "Invalid Quantity",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    if (purchaseQuantity > availableStock) {
                        JOptionPane.showMessageDialog(null,
                                "Cannot purchase " + purchaseQuantity + " items. Only " + availableStock + " available.",
                                "Insufficient Stock",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    // Calculate total cost
                    double totalCost = purchaseQuantity * productPrice;

                    // Confirm purchase
                    int confirmResult = JOptionPane.showConfirmDialog(null,
                            "Confirm Purchase:\n" +
                                    "Product: " + productName + "\n" +
                                    "Quantity: " + purchaseQuantity + "\n" +
                                    "Unit Price: $" + String.format("%.2f", productPrice) + "\n" +
                                    "Total Cost: $" + String.format("%.2f", totalCost) + "\n\n" +
                                    "Proceed with purchase?",
                            "Confirm Purchase",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE);

                    if (confirmResult == JOptionPane.YES_OPTION) {
                        // Process the purchase
                        sqlite.processPurchase(productName, purchaseQuantity, currentUsername); // You'll need to pass actual username

                        // Refresh the table to show updated stock
                        init();

                        // Show success message
                        JOptionPane.showMessageDialog(null,
                                "Purchase successful!\n" +
                                        "Purchased: " + purchaseQuantity + " x " + productName + "\n" +
                                        "Total: $" + String.format("%.2f", totalCost),
                                "Purchase Complete",
                                JOptionPane.INFORMATION_MESSAGE);
                    }
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null,
                        "Please enter a valid number for quantity.",
                        "Invalid Input",
                        JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,
                        "Error processing purchase: " + e.getMessage(),
                        "Purchase Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null,
                    "Please select a product to purchase.",
                    "No Selection",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_purchaseBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        JTextField nameFld = new JTextField();
        JTextField stockFld = new JTextField();
        JTextField priceFld = new JTextField();

        designer(nameFld, "PRODUCT NAME");
        designer(stockFld, "PRODUCT STOCK");
        designer(priceFld, "PRODUCT PRICE");

        Object[] message = {
            "Insert New Product Details:", nameFld, stockFld, priceFld
        };

        int result = JOptionPane.showConfirmDialog(null, message, "ADD PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);


        if (result == JOptionPane.OK_OPTION) {
            try {
                // Get the input values
                String name = nameFld.getText().trim();
                String stockText = stockFld.getText().trim();
                String priceText = priceFld.getText().trim();

                // Validate inputs
                if (name.isEmpty() || stockText.isEmpty() || priceText.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Parse numeric values
                int stock = Integer.parseInt(stockText);
                double price = Double.parseDouble(priceText);

                // Validate numeric ranges
                if (stock < 0) {
                    JOptionPane.showMessageDialog(null, "Stock cannot be negative.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (price < 0) {
                    JOptionPane.showMessageDialog(null, "Price cannot be negative.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Add product to database
                sqlite.addProduct(name, stock, price);

                // Refresh the table to show the new product
                init();

                // Show success message
                JOptionPane.showMessageDialog(null, "Product '" + name + "' added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please enter valid numbers for stock and price.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error adding product: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed

        if(table.getSelectedRow() >= 0){
            try {
                // Get current values from selected row
                String currentName = tableModel.getValueAt(table.getSelectedRow(), 0).toString();
                String currentStock = tableModel.getValueAt(table.getSelectedRow(), 1).toString();
                String currentPrice = tableModel.getValueAt(table.getSelectedRow(), 2).toString();

                JTextField nameFld = new JTextField(currentName);
                JTextField stockFld = new JTextField(currentStock);
                JTextField priceFld = new JTextField(currentPrice);

                designer(nameFld, "PRODUCT NAME");
                designer(stockFld, "PRODUCT STOCK");
                designer(priceFld, "PRODUCT PRICE");

                Object[] message = {
                        "Edit Product Details:", nameFld, stockFld, priceFld
                };

                int result = JOptionPane.showConfirmDialog(null, message, "EDIT PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

                if (result == JOptionPane.OK_OPTION) {
                    // Get the input values
                    String newName = nameFld.getText().trim();
                    String stockText = stockFld.getText().trim();
                    String priceText = priceFld.getText().trim();

                    // Validate inputs
                    if (newName.isEmpty() || stockText.isEmpty() || priceText.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    // Parse numeric values
                    int stock = Integer.parseInt(stockText);
                    double price = Double.parseDouble(priceText);

                    // Validate numeric ranges
                    if (stock < 0) {
                        JOptionPane.showMessageDialog(null, "Stock cannot be negative.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    if (price < 0) {
                        JOptionPane.showMessageDialog(null, "Price cannot be negative.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    // Update product in database
                    sqlite.updateProduct(currentName, newName, stock, price);

                    // Refresh the table
                    init();

                    // Show success message
                    JOptionPane.showMessageDialog(null, "Product updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please enter valid numbers for stock and price.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error updating product: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a product to edit.", "No Selection", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {
        if(table.getSelectedRow() >= 0){
            String productName = tableModel.getValueAt(table.getSelectedRow(), 0).toString();

            int result = JOptionPane.showConfirmDialog(null,
                    "Are you sure you want to delete '" + productName + "'?",
                    "DELETE PRODUCT",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);

            if (result == JOptionPane.YES_OPTION) {
                try {
                    // Delete product from database
                    sqlite.deleteProduct(productName);

                    // Refresh the table
                    init();

                    // Show success message
                    JOptionPane.showMessageDialog(null, "Product '" + productName + "' deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error deleting product: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a product to delete.", "No Selection", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton purchaseBtn;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
