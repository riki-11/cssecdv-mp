/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Constants.LogEventTypes;
import Controller.SQLite;
import Model.User;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import Service.PasswordStrengthChecker;
import dto.PasswordCheckResult;
import Service.AuthorizationManager;



/**
 *
 * @author beepxD
 */
public class MgmtUser extends javax.swing.JPanel {

    public SQLite sqlite;
    public DefaultTableModel tableModel;
    private int userRole;
    private String currentUsername;

    public MgmtUser(SQLite sqlite, int userRole, String currentUsername) {
        initComponents();
        this.sqlite = sqlite;
        this.currentUsername = currentUsername;  // Now this works as expected
        tableModel = (DefaultTableModel)table.getModel();
        table.getTableHeader().setFont(new java.awt.Font("SansSerif", java.awt.Font.BOLD, 14));

        configureButtonVisibility(userRole);
    }

    public void init(){
        //      CLEAR TABLE
        for(int nCtr = tableModel.getRowCount(); nCtr > 0; nCtr--){
            tableModel.removeRow(0);
        }

//      LOAD CONTENTS
        //TODO: update to match the table info
        ArrayList<User> users = sqlite.getUsers();
        for(int nCtr = 0; nCtr < users.size(); nCtr++){
            tableModel.addRow(new Object[]{
                    users.get(nCtr).getUsername(),
                    "********", // Mask password for security (better than showing hashes)
                    users.get(nCtr).getRole(),
                    users.get(nCtr).getLastUsed()
            });
        }
    }

    private void logValidationFailure(String reason) {
        sqlite.addSecurityLog(
                LogEventTypes.INPUT_VALIDATION_FAILURE,
                currentUsername != null ? currentUsername : "Unknown User",
                reason
        );
    }

    public void designer(JTextField component, String text){
        component.setSize(70, 600);
        component.setFont(new java.awt.Font("Tahoma", 0, 18));
        component.setBackground(new java.awt.Color(240, 240, 240));
        component.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        component.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), text, javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12)));
    }


    private void configureButtonVisibility(int userRole) {
        // User management permissions:
        // 5 = Admin (full user management)
        // 4 = Manager (limited user management)
        // 3 = Staff (no user management)
        // 2 = Client (no user management)

        switch(userRole) {
            case 5: // Admin - full user management
                editRoleBtn.setVisible(true);
                deleteBtn.setVisible(true);
                lockBtn.setVisible(false);
                chgpassBtn.setVisible(false);
                break;

            case 4: // Manager - limited user management (no role editing)
                editRoleBtn.setVisible(false);
                deleteBtn.setVisible(false);
                lockBtn.setVisible(false);
                chgpassBtn.setVisible(false);
                break;

            case 3: // Staff - no user management
            case 2: // Client - no user management
            default:
                editRoleBtn.setVisible(false);
                deleteBtn.setVisible(false);
                lockBtn.setVisible(false);
                chgpassBtn.setVisible(false);
                break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        editRoleBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        lockBtn = new javax.swing.JButton();
        chgpassBtn = new javax.swing.JButton();

        table.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Username", "Password", "Role", "Last Used"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(24);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(160);
            table.getColumnModel().getColumn(1).setPreferredWidth(160);
            table.getColumnModel().getColumn(2).setPreferredWidth(100);
            table.getColumnModel().getColumn(3).setPreferredWidth(300);
        }

        editRoleBtn.setBackground(new java.awt.Color(255, 255, 255));
        editRoleBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        editRoleBtn.setText("EDIT ROLE");
        editRoleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRoleBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(255, 255, 255));
        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        lockBtn.setBackground(new java.awt.Color(255, 255, 255));
        lockBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lockBtn.setText("LOCK/UNLOCK");
        lockBtn.setToolTipText("");
        lockBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockBtnActionPerformed(evt);
            }
        });

        chgpassBtn.setBackground(new java.awt.Color(255, 255, 255));
        chgpassBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        chgpassBtn.setText("CHANGE PASS");
        chgpassBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chgpassBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editRoleBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(lockBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(chgpassBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chgpassBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editRoleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lockBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void editRoleBtnActionPerformed(java.awt.event.ActionEvent evt) {

        if (!AuthorizationManager.canEditUserRoles()) {
            return;
        }

        if (table.getSelectedRow() < 0) {
            logValidationFailure("Attempted edit user without selecting user");
            JOptionPane.showMessageDialog(null, "No user selected!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if(table.getSelectedRow() >= 0) {
            String[] options = {"2-CLIENT","3-STAFF","4-MANAGER","5-ADMIN"};
            String username = tableModel.getValueAt(table.getSelectedRow(), 0).toString();
            int currentRole = (int)tableModel.getValueAt(table.getSelectedRow(), 2);

            String result = (String) JOptionPane.showInputDialog(null, "USER: " + username,
                    "EDIT USER ROLE", JOptionPane.QUESTION_MESSAGE, null,
                    options, options[currentRole - 2]); // Subtract 2 since roles start from 2

            if(result != null) {
                try {
                    int selectedRole = Integer.parseInt(String.valueOf(result.charAt(0)));
                    if (selectedRole < 2 || selectedRole > 5) {
                        logValidationFailure("Invalid role selected (" + selectedRole + ") for user: " + username);
                        JOptionPane.showMessageDialog(null, "Invalid role selected!", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    SQLite db = new SQLite();
                    if (db.updateUserRole(username, selectedRole)) {
                        JOptionPane.showMessageDialog(null, "User role updated successfully!");
                        refreshUserTable();
                    } else {
                        JOptionPane.showMessageDialog(null, "Failed to update user role!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    logValidationFailure("Error updating role for user: " + username);
                    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {
        if (table.getSelectedRow() < 0) {
            logValidationFailure("Attempted delete without selecting user");
            JOptionPane.showMessageDialog(null, "No user selected!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!AuthorizationManager.canDeleteUsers()) {
            return;
        }

        if(table.getSelectedRow() >= 0) {
            String username = tableModel.getValueAt(table.getSelectedRow(), 0).toString();
            int result = JOptionPane.showConfirmDialog(null,
                    "Are you sure you want to delete " + username + "?",
                    "DELETE USER", JOptionPane.YES_NO_OPTION);

            if (result == JOptionPane.YES_OPTION) {
                try {
                    SQLite db = new SQLite();
                    if (db.deleteUserWithDependencies(username)) {
                        JOptionPane.showMessageDialog(null, "User deleted successfully!");
                        refreshUserTable();
                    } else {
                        JOptionPane.showMessageDialog(null, "User not found or could not be deleted!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Error deleting user: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    private void lockBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockBtnActionPerformed
        if (table.getSelectedRow() < 0) {
            logValidationFailure("Attempted lock without selecting user");
            JOptionPane.showMessageDialog(null, "No user selected!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if(table.getSelectedRow() >= 0){
            String state = "lock";
            if("1".equals(tableModel.getValueAt(table.getSelectedRow(), 3) + "")){
                state = "unlock";
            }

            int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to " + state + " " + tableModel.getValueAt(table.getSelectedRow(), 0) + "?", "DELETE USER", JOptionPane.YES_NO_OPTION);

            if (result == JOptionPane.YES_OPTION) {
                System.out.println(tableModel.getValueAt(table.getSelectedRow(), 0));
            }
        }
    }//GEN-LAST:event_lockBtnActionPerformed

    private void chgpassBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chgpassBtnActionPerformed
        if (table.getSelectedRow() < 0) {
            logValidationFailure("Attempted change password without selecting user");
            JOptionPane.showMessageDialog(null, "No user selected!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if(table.getSelectedRow() >= 0){
            JTextField password = new JPasswordField();
            JTextField confpass = new JPasswordField();
            designer(password, "PASSWORD");
            designer(confpass, "CONFIRM PASSWORD");

            Object[] message = {
                "Enter New Password:", password, confpass
            };

            int result = JOptionPane.showConfirmDialog(null, message, "CHANGE PASSWORD", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

            if (result == JOptionPane.OK_OPTION) {
                String newPass = password.getText();
                String confirmPass = confpass.getText();

                if (newPass.trim().isEmpty() || confirmPass.trim().isEmpty()) {
                    logValidationFailure("Attempted password change with blank fields for user: " +
                            tableModel.getValueAt(table.getSelectedRow(), 0));
                    JOptionPane.showMessageDialog(null, "Password fields cannot be blank!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (!newPass.equals(confirmPass)) {
                    logValidationFailure("Password mismatch on change attempt for user: " +
                            tableModel.getValueAt(table.getSelectedRow(), 0));
                    JOptionPane.showMessageDialog(null, "Passwords do not match!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                PasswordCheckResult checkResult = PasswordStrengthChecker.checkStrength(newPass);
                if (!checkResult.isValid) {
                    logValidationFailure("Weak password attempt for user: " +
                            tableModel.getValueAt(table.getSelectedRow(), 0) + " – " + checkResult.message);
                    JOptionPane.showMessageDialog(null, checkResult.message, "Weak Password", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                System.out.println(newPass);

            }
        }
    }//GEN-LAST:event_chgpassBtnActionPerformed

    public boolean attemptUserManagement(String action, String username, int userRole, String targetUser) {
        int requiredRole = 5; // Admin role required

        if (userRole >= requiredRole) {
            sqlite.addSecurityLog(LogEventTypes.ACCESS_GRANTED, username,
                    "User management access granted - Action: " + action + " on user: " + targetUser);
            return true;
        } else {
            sqlite.addSecurityLog(LogEventTypes.ACCESS_DENIED, username,
                    "User management access denied - Action: " + action + " on user: " + targetUser +
                            " (User role: " + userRole + ", Required: " + requiredRole + ")");
            return false;
        }
    }

    private void refreshUserTable() {
        // Clear the current table data
        tableModel.setRowCount(0);

        // Get updated user data from database
        ArrayList<User> users = sqlite.getUsers();

        // Populate the table with fresh data - matching your existing init() format
        for(User user : users) {
            tableModel.addRow(new Object[]{
                    user.getUsername(),
                    "********", // Mask password for security (better than showing hashes)
                    user.getRole(),
                    user.getLastUsed()
            });
        }

        // Maintain your existing column widths
        table.getColumnModel().getColumn(0).setPreferredWidth(160);
        table.getColumnModel().getColumn(1).setPreferredWidth(160);
        table.getColumnModel().getColumn(2).setPreferredWidth(100);
        table.getColumnModel().getColumn(3).setPreferredWidth(300);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chgpassBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editRoleBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lockBtn;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
